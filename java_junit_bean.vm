/*
 * JUnit test case for bean $entity.name
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder(${TEST_SRC})};

import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test case for bean $entity.name
 * 
 * @author Telosys Tools Generator
 *
 */
#set ( $beanVar = ${fn.uncapitalize($entity.name)} )
public class ${entity.name}Test 
{

	@Test
	public void testSettersAndGetters() {
		
		System.out.println("Checking class ${entity.name} getters and setters ..." );
		
		${entity.name} ${beanVar} = new ${entity.name}();

/*
#foreach( $field in $entity.attributes )
		//--- Test setter/getter for field "$field.name"  ( type : $field.type )
		// System.out.println(" checking field $field.name ..." );
#set ( $type = $fn.uncapitalize($field.type) )
#if ( $type == "byte" || $type == "short" || $type == "int" || $type == "integer" || $type == "long" || $type == "float" || $type == "double" )
		${beanVar}.${field.setter}( ${type}Value ) ;
		Assert.assertTrue( ${type}Value == ${beanVar}.${field.getter}() ) ;
#elseif ( $type == "string" )
		${beanVar}.${field.setter}( stringValue ) ;
		Assert.assertTrue( stringValue.equals( ${beanVar}.${field.getter}() ) ) ;
#elseif ( $type == "bigdecimal" )
		${beanVar}.${field.setter}( bigdecimalValue ) ;
		Assert.assertTrue( bigdecimalValue.equals( ${beanVar}.${field.getter}() ) ) ;
		Assert.assertTrue( bigdecimalValue.compareTo( ${beanVar}.${field.getter}() ) == 0 ) ;
#elseif ( $type == "boolean" )
		${beanVar}.${field.setter}( true ) ;
		Assert.assertTrue( ${beanVar}.${field.getter}() ) ;
		${beanVar}.${field.setter}( false ) ;
		Assert.assertFalse( ${beanVar}.${field.getter}() ) ;
#elseif ( $field.fullType == "java.util.Date" )
		${beanVar}.${field.setter}( dateValue ) ;
		Assert.assertTrue( dateValue.equals( ${beanVar}.${field.getter}() ) );
#elseif ( $field.fullType == "java.sql.Date" )
		${beanVar}.${field.setter}( sqldateValue ) ;
		Assert.assertTrue( sqldateValue.equals( ${beanVar}.${field.getter}() ) );
#elseif ( $field.fullType == "java.sql.Time" )
		${beanVar}.${field.setter}( sqltimeValue ) ;
		Assert.assertTrue( sqltimeValue.equals( ${beanVar}.${field.getter}() ) );
#elseif ( $field.fullType == "java.sql.Timestamp" )
		${beanVar}.${field.setter}( sqltimestampValue ) ;
		Assert.assertTrue( sqltimestampValue.equals( ${beanVar}.${field.getter}() ) );
#elseif ( $field.fullType == "byte[]" )
		${beanVar}.${field.setter}( bytesArray ) ;
		Assert.assertTrue( java.util.Arrays.equals(bytesArray, ${beanVar}.${field.getter}() ) ) ;
#end

#end
*/

#set( $values = $fn.buildValues($entity.attributes, 1) )

#foreach( $attribute in $entity.attributes )
#set( $value = $values.getValue($attribute.name) )
		//--- Test setter/getter for attribute "$attribute.name"  ( type : $attribute.type )
		${beanVar}.${attribute.setter}( $value ) ;
## #if ( $attribute.isPrimitiveType() )
##		Assert.assertEquals( $value, ${beanVar}.${attribute.getter}() ) ;
## #else
#if ( $value == "null" )
		Assert.assertNull(${beanVar}.${attribute.getter}());
#else
##		Assert.assertTrue($values.comparisonStatement(${beanVar}, $attribute ));
		Assert.assertEquals( $value, ${beanVar}.${attribute.getter}() ) ;
#end

## #end

#end
	}



}
