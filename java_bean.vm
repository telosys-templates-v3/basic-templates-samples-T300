/*
 * Java bean class for entity "${entity.databaseTable}" 
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder(${SRC})};

import java.io.Serializable;

#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end

/**
 * Java bean for entity "${entity.databaseTable}"
 * 
 * @author Telosys Tools Generator
 *
 */
public class $entity.name implements Serializable
{
    private static final long serialVersionUID = 1L;

#foreach( $field in $entity.keyAttributes )
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end; // Id or Primary Key
#end

#foreach( $field in $entity.nonKeyAttributes )
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

    /**
     * Default constructor
     */
    public ${entity.name}() {
        super();
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR ID OR PRIMARY KEY 
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    
    /**
     * Set the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @param $field.name
     */
	public void ${field.setter}( $field.type $field.name ) {
        this.$field.name = $field.name ;
    }
#end
#if ( $field.getter )    
    /**
     * Get the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @return the field value
     */
	public $field.type ${field.getter}() {
        return this.$field.name;
    }
#end
#end

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR OTHER DATA FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $entity.nonKeyAttributes )
#if ( $field.setter )
    /**
     * Set the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @param $field.name
     */
    public void ${field.setter}( $field.type $field.name ) {
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )
    /**
     * Get the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @return the field value
     */
    public $field.type ${field.getter}() {
        return this.$field.name;
    }
#end

#end
    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    @Override
$java.toStringMethod($entity, 4)
}
